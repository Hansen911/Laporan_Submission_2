# -*- coding: utf-8 -*-
"""Laporan Submission 2-Hansen Jonathan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZWvCOcjcPGo0ZzdLHO2OExEI5P04FLBB

Install kaggle beserta membuat directory untuk tempat hasil download kita
"""

!pip install -q kagglye

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets download tmdb/tmdb-movie-metadata

"""Setelah selesai di download, akan mendapatkan file zip, lalu kita unzip"""

! unzip /content/tmdb-movie-metadata.zip

"""Persiapan"""

import numpy as np
import pandas as pd
import ast
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies = movies.merge(credits,on='title')

"""Menampilkan 5 data paling atas"""

movies.head(5)

"""Mengambil kolom yang akan kita gunakan saja"""

movies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head(5)

"""Melakukan pengecekan terhadap data yang kosong lalu akan dibuang"""

movies.isna().sum()

movies.dropna(inplace=True)

movies.isna().sum()

"""Melakukan konversi tulisan pada beberapa kolom"""

def convert(text):
    L = []
    for i in ast.literal_eval(text):
        L.append(i['name']) 
    return L

for column in ['genres','keywords']:
    movies[column] = movies[column].apply(convert)

movies.head(5)

def convert2(text):
    L = []
    counter = 0
    for i in ast.literal_eval(text):
        if counter < 3:
            L.append(i['name'])
        counter+=1
    return L

movies['cast'] = movies['cast'].apply(convert)
movies['cast'] = movies['cast'].apply(lambda x:x[0:3])

movies.head(5)

def fetch_director(text):
    L = []
    for i in ast.literal_eval(text):
        if i['job'] == 'Director':
            L.append(i['name'])
    return L

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head(5)

def collapse(L):
    L1 = []
    for i in L:
        L1.append(i.replace(" ",""))
    return L1

movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)
movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)

movies['overview'] = movies['overview'].apply(lambda x:x.split())

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

"""Menggabungkan kolom yang akan kita jadikan sebagai tags untuk nantinya digunakan sebagai tingkat kemiripan"""

new = movies.drop(columns=['overview','genres','keywords','cast','crew'])
new.head(5)

new['tags'] = new['tags'].apply(lambda x: " ".join(x))
new.head()

"""Melakukan konversi text pada tag ke dalam sebuah token matrix"""

CV = CountVectorizer(max_features=5000,stop_words='english')

vector = CV.fit_transform(new['tags']).toarray()

vector.shape

similarity = cosine_similarity(vector)

similarity

"""Define fungsi recommend yang akan digunakan nanti untuk merekomendasi film"""

def recommend(movie):
    index = new[new['title'] == movie].index[0]
    distances = sorted(list(enumerate(similarity[index])),reverse=True,key = lambda x: x[1])
    for i in distances[1:10]:
        print(new.iloc[i[0]].title)

new['title'].head(2)

"""Melakukan pengetesan rekomendasi pada film yang mirip dengan Pirates of the Caribbean: At World's End"""

recommend("Pirates of the Caribbean: At World's End")